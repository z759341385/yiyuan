{"remainingRequest":"/Users/zhc/project/yiyuan/node_modules/thread-loader/dist/cjs.js!/Users/zhc/project/yiyuan/node_modules/babel-loader/lib/index.js!/Users/zhc/project/yiyuan/public/svg-progress-bar.js","dependencies":[{"path":"/Users/zhc/project/yiyuan/public/svg-progress-bar.js","mtime":1633672657446},{"path":"/Users/zhc/project/yiyuan/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhc/project/yiyuan/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhc/project/yiyuan/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}