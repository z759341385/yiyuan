{"remainingRequest":"/Users/zhc/project/yiyuan/node_modules/thread-loader/dist/cjs.js!/Users/zhc/project/yiyuan/node_modules/babel-loader/lib/index.js!/Users/zhc/project/yiyuan/node_modules/ts-loader/index.js??ref--13-3!/Users/zhc/project/yiyuan/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhc/project/yiyuan/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhc/project/yiyuan/src/views/fire/index.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/zhc/project/yiyuan/src/views/fire/index.vue","mtime":1635209544912},{"path":"/Users/zhc/project/yiyuan/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhc/project/yiyuan/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhc/project/yiyuan/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/zhc/project/yiyuan/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/zhc/project/yiyuan/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhc/project/yiyuan/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}