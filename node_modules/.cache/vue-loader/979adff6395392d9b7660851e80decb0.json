{"remainingRequest":"/Users/zhc/project/yiyuan/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zhc/project/yiyuan/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhc/project/yiyuan/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhc/project/yiyuan/src/views/patients/list/index.vue?vue&type=template&id=18e630d0&scoped=true&","dependencies":[{"path":"/Users/zhc/project/yiyuan/src/views/patients/list/index.vue","mtime":1634198230402},{"path":"/Users/zhc/project/yiyuan/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhc/project/yiyuan/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zhc/project/yiyuan/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhc/project/yiyuan/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}